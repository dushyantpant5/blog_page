import React from 'react'
import Head from 'next/head'
import Tabs from '@/components/Tabs'
import { GetServerSideProps, NextPage } from 'next'
import { AxiosResponse } from 'axios'
import { ICollectionResponse,ICategory, IPagination, IArticle, IQueryoptions } from '@/types'
import { fetchArticles, fetchCategories } from '@/http'
import qs from 'qs'
import ArticleList from '@/components/ArticleList'
import { capitalizeFirstLetter, debounce, makeCategory } from '@/utils'
import Pagination from '@/components/Pagination'
import { useRouter } from 'next/router'

interface IPropType{
  categories:{
    items:ICategory[];
    pagination:IPagination;
  },
  articles:{
    items:IArticle[];
    pagination:IPagination
  },
  Slug:string
}


const category = ({categories,articles,Slug}:IPropType) => {
  
  const formattedCategory = (Slug:string)=>{
    
    return (capitalizeFirstLetter(makeCategory(Slug)))
    
  }

  const router = useRouter();
  const {category:categorySlug} = router.query;

  const {page,pageCount} = articles.pagination;

  const handleSearch = (query:string)=>{
    router.push(`/category/${categorySlug}?search=${query}`)
  }

  return <>
      <Head>
        <title>{formattedCategory(Slug)} </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Tabs categories={categories.items} handleOnSearch={debounce(handleSearch,500)}/>
      
      <ArticleList articles={articles.items} />

      <Pagination page={page} pageCount={pageCount} redirectUrl={`/category/${categorySlug}`}/>

  </>
}


export const getServerSideProps : GetServerSideProps = async ({query}) =>  {

  //Articles

  

  const options:Partial<IQueryoptions> ={
    populate:['author.avatar'],
    sort:['id:desc'],
    filters: {
      category: {
        Slug: query.category,
      },
    },
    pagination:{
      page:query.page? +query.page : 1,
      pageSize:1
    }
  }

  
  if(query.search)
  {
    options.filters = {
      Title:{
        $containsi:query.search
      }
    }
  }


  const queryString = qs.stringify(options)

  // console.log('queryString:', queryString);


  const {data:articles}:AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);

  // console.log('articles:', articles);
  
  //Categories
  const {data:categories}:AxiosResponse<ICollectionResponse<ICategory[]>> =  await fetchCategories();

  return {
    props:{
      categories:{
        items:categories.data,
        pagination:categories.meta.pagination
      },
      articles:{
        items:articles.data,
        pagination:articles.meta.pagination
      },
      Slug:query.category
    }
  }

}

export default category